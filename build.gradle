plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'TiCatch'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {

	// SPRING
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// LOMBOK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// DB
	runtimeOnly 'org.postgresql:postgresql'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	//JPA
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// HTTP Client
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	testImplementation 'org.springframework.security:spring-security-test'

	// Jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// JSON
	implementation 'org.json:json:20090211'

	// DISCORD
	implementation 'com.github.napstr:logback-discord-appender:1.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.9"
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required.set(true)
		html.required.set(true)

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, include: '**/service/**')
			}))
		}

		xml.destination file("${buildDir}/jacoco/index.xml")
		html.destination file("${buildDir}/jacoco/index.html")
	}
}